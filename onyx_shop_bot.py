import os
import threading
import logging
from flask import Flask
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputFile, ReplyKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters,
    ContextTypes,
)
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∏–∑ .env
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
TARGET_CHANNEL_ID = os.getenv("TARGET_CHANNEL_ID")
MODERATION_CHAT_ID = os.getenv("MODERATION_CHAT_ID")
REJECTED_CHAT_ID = os.getenv("REJECTED_CHAT_ID")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö —Å–ª–æ–≤
FORBIDDEN_WORDS = {"–æ–±–º–∞–Ω", "–º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ", "scam"}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flask
app = Flask(__name__)

# ===== –£—Ç–∏–ª–∏—Ç—ã =====
def normalize_text(text: str) -> str:
    translation = str.maketrans(
        "√†√°√§√¢√ß√®√©√´√™√¨√≠√Ø√Æ√±√≤√≥√∂√¥√π√∫√º√ª",
        "aaaa√ßeeeeiiiinoooouuuu"
    )
    return text.translate(translation)

def contains_forbidden_words(text: str) -> bool:
    normalized_text = normalize_text(text.lower())
    return any(word in normalized_text for word in FORBIDDEN_WORDS)

# ===== –•–µ–Ω–¥–ª–µ—Ä—ã Telegram =====
async def start_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [["üì¢ –†–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ"]]
    reply_markup = ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è + —Ç–µ–∫—Å—Ç–∞
    photo_path = os.path.join(os.path.dirname(__file__), "onyxshopbot.png")
    with open(photo_path, "rb") as photo:
        await update.message.reply_photo(
            photo=photo,
            caption="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Onyx Shop Bot!\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ.",
            reply_markup=reply_markup,
        )

async def text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    user_id = update.message.from_user.id

    if contains_forbidden_words(text):
        await update.message.reply_text("üö´ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ –∏ –±—ã–ª–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ ID, —á—Ç–æ–±—ã –ø–æ—Ç–æ–º –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å
    keyboard = InlineKeyboardMarkup([
        [
            InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve|{user_id}|{update.message.message_id}"),
            InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject|{user_id}|{update.message.message_id}"),
        ]
    ])

    await context.bot.send_message(
        chat_id=MODERATION_CHAT_ID,
        text=f"–ù–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}:\n\n{text}",
        reply_markup=keyboard
    )

async def photo_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üñº –°–ø–∞—Å–∏–±–æ –∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ! –û–Ω–æ –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º.")

async def callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data.split("|")

    if len(data) != 3:
        await query.edit_message_text("‚ùó –û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ callback data.")
        return

    action, user_id, message_id = data
    user_id = int(user_id)
    message_id = int(message_id)

    try:
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        msg = await context.bot.forward_message(
            chat_id=context.bot.id,
            from_chat_id=user_id,
            message_id=message_id
        )

        if action == "approve":
            await context.bot.send_message(chat_id=TARGET_CHANNEL_ID, text=msg.text)
            await query.edit_message_text("‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ–¥–æ–±—Ä–µ–Ω–æ –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ.")
        elif action == "reject":
            await context.bot.send_message(chat_id=REJECTED_CHAT_ID, text=msg.text)
            await query.edit_message_text("‚ùå –û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback: {e}")
        await query.edit_message_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ.")

# ===== –ó–∞–ø—É—Å–∫ Telegram Bot =====
def run_bot():
    application = Application.builder().token(TOKEN).build()

    application.add_handler(CommandHandler("start", start_cmd))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_handler))
    application.add_handler(MessageHandler(filters.PHOTO, photo_handler))
    application.add_handler(CallbackQueryHandler(callback_handler))

    logger.info("‚úÖ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

# ===== Flask —Ä–æ—É—Ç =====
@app.route("/", methods=["GET", "HEAD"])
def index():
    return "‚úÖ Onyx Shop Bot —Ä–∞–±–æ—Ç–∞–µ—Ç!", 200

# ===== –¢–æ—á–∫–∞ –∑–∞–ø—É—Å–∫–∞ =====
if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    threading.Thread(target=run_bot, daemon=True).start()
    logger.info("üöÄ Flask —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ Render.")
    app.run(host="0.0.0.0", port=8080)
