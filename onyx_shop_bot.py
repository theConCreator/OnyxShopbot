import os
import threading
import logging
from flask import Flask
from dotenv import load_dotenv
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters,
    ContextTypes,
)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
load_dotenv()
TOKEN              = os.getenv("BOT_TOKEN")
TARGET_CHANNEL_ID  = int(os.getenv("TARGET_CHANNEL_ID"))
MODERATION_CHAT_ID = int(os.getenv("MODERATION_CHAT_ID"))
REJECTED_CHAT_ID   = int(os.getenv("REJECTED_CHAT_ID"))

# Flask –¥–ª—è Render
app = Flask(__name__)
@app.route("/", methods=["GET", "HEAD"])
def alive():
    return "Onyx Shop Bot is alive!", 200

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
RULES_TEXT = (
    "üìù –ü—Ä–∞–≤–∏–ª–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π:\n\n"
    "1. –ù–µ –ø—Ä–µ–≤—ã—à–∞—Ç—å 100 —Å–∏–º–≤–æ–ª–æ–≤.\n"
    "2. –ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–ª–µ–µ 1 —Ñ–æ—Ç–æ.\n"
    "3. –ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ (–º–∞—Ç, —Ä—É–≥–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –∏ —Ç.–¥.).\n"
    "4. –û–±—ä—è–≤–ª–µ–Ω–∏—è –º–æ–∂–Ω–æ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –Ω–µ —á–∞—â–µ —á–µ–º —Ä–∞–∑ –≤ 2 —á–∞—Å–∞\n"
    "5. –û–±—ä—è–≤–ª–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –∫–∞—Å–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –ø–æ–∫—É–ø–∫–∏, –ø—Ä–æ–¥–∞–∂–∏ –∏–ª–∏ –æ–±–º–µ–Ω–∞. "
    "–†–µ–∫–ª–∞–º–∞ –∏ —Å—Ç–æ—Ä–æ–Ω–Ω–∏–µ —Ç–µ–º—ã –∑–∞–ø—Ä–µ—â–µ–Ω—ã."
)
SALE_KW   = ["–ø—Ä–æ–¥–∞–∂–∞","–ø—Ä–æ–¥–∞—é","–ø—Ä–æ–¥–∞–º","–æ—Ç–¥–∞–º","sell","—Å–µ–ª–ª","—Å–µ–π–ª","—Å–æ–ª—å—é"]
BUY_KW    = ["–∫—É–ø–ª—é","–ø–æ–∫—É–ø–∫–∞","buy","–≤–æ–∑—å–º—É","–∑–∞–±–µ—Ä—É"]
TRADE_KW  = ["–æ–±–º–µ–Ω","–º–µ–Ω—è—é","trade","swap"]
RENT_KW   = ["—Å–¥–∞–º","–∞—Ä–µ–Ω–¥–∞","–∞—Ä–µ–Ω–¥—É"]
CAT_KW    = ["nft","—á–∞—Ç","–∫–∞–Ω–∞–ª","–¥–æ–ª–ª–∞—Ä—ã","—Ç–æ–Ω","usdt","–∑–≤—ë–∑–¥—ã","–ø–æ–¥–∞—Ä–∫–∏"]
FORBIDDEN = ["—Ä–µ–∫–ª–∞–º–∞","—Å–ø–∞–º","—Å—Å—ã–ª–∫–∞","instagram","http","–Ω–∞—Ä–∫–æ—Ç–∏–∫–∏","–ø–æ—Ä–Ω","–º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ","–µ–±–∞—Ç—å","—Ö—É–π","—Å—É–∫–∞"]

# –¢–∞–π–º–µ—Ä—ã
last_post_time = {}
POST_COOLDOWN = timedelta(hours=2)
pending = {}

# –§—É–Ω–∫—Ü–∏–∏
def normalize(text: str) -> str:
    table = str.maketrans({ "–∞": "a", "–±": "b", "–≤": "v", "–≥": "g", "–¥": "d", "–µ": "e", "—ë": "e",
                            "–∂": "zh","–∑": "z", "–∏": "i", "–π": "y", "–∫": "k", "–ª": "l", "–º": "m",
                            "–Ω": "n", "–æ": "o", "–ø": "p", "—Ä": "r", "—Å": "s", "—Ç": "t", "—É": "u",
                            "—Ñ": "f", "—Ö": "h", "—Ü": "ts","—á": "ch","—à": "sh","—â": "sh","—ä": "_",
                            "—ã": "y", "—å": "_", "—ç": "e", "—é": "yu","—è": "ya"})
    return text.translate(table)

def count_symbols(text: str) -> int:
    return len(text)

def has_forbidden(text: str) -> bool:
    return any(f in normalize(text.lower()) for f in FORBIDDEN)

def has_required(text: str) -> bool:
    nt = normalize(text.lower())
    return any(k in nt for k in SALE_KW + BUY_KW + TRADE_KW)

def build_caption(text: str, user: str) -> str:
    tags = []
    words = text.lower().split()
    for w in words:
        if any(k in w for k in SALE_KW):   tags.append("#–ø—Ä–æ–¥–∞–∂–∞")
        if any(k in w for k in BUY_KW):    tags.append("#–ø–æ–∫—É–ø–∫–∞")
        if any(k in w for k in TRADE_KW):  tags.append("#–æ–±–º–µ–Ω")
        if any(k in w for k in RENT_KW):  tags.append("#–∞—Ä–µ–Ω–¥–∞")
        for c in CAT_KW:
            if c in w: tags.append(f"#{c}")
    tags.append(f"@{user}")
    seen = set(); uniq = []
    for t in tags:
        if t not in seen:
            seen.add(t); uniq.append(t)
    return " ".join(uniq) + "\n\n" + text.strip()

def contact_button(user: str):
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("–ù–∞–ø–∏—Å–∞—Ç—å –ø—Ä–æ–¥–∞–≤—Ü—É", url=f"https://t.me/{user}")],
        [InlineKeyboardButton("–†–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ", url="https://t.me/onyxsh0pbot")]
    ])

def moderation_buttons(ad_id: int):
    return InlineKeyboardMarkup([[
        InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_{ad_id}"),
        InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{ad_id}")
    ]])

def format_announcement(text: str, username: str) -> str:
    return (
        "–û–±—ä—è–≤–ª–µ–Ω–∏–µ\n"
        "--------------------\n"
        f"{text.strip()}\n"
        "--------------------\n"
        f"–û—Ç–ø—Ä–∞–≤–∏–ª(–∞): @{username}"
    )

async def check_subscription(ctx: ContextTypes.DEFAULT_TYPE, user_id: int) -> bool:
    try:
        member = await ctx.bot.get_chat_member(chat_id=TARGET_CHANNEL_ID, user_id=user_id)
        return member.status in ("member", "administrator", "creator")
    except:
        return False

# –ö–æ–º–∞–Ω–¥—ã
async def start_cmd(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user.username
    with open("onyxshopbot.png", "rb") as img:
        await update.message.reply_photo(
            photo=img,
            caption="–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ –±–æ—Ç –º–∞–≥–∞–∑–∏–Ω–∞ Onyx Shop. –ß—Ç–æ–±—ã –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç (–ø—Ä–∞–≤–∏–ª–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ - /rules)."
        )

async def rules_cmd(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(RULES_TEXT)

async def cleartime_cmd(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id == 5465504821:
        last_post_time.clear()
        await update.message.reply_text("‚è± –í—Å–µ —Ç–∞–π–º–µ—Ä—ã —Å–±—Ä–æ—à–µ–Ω—ã.")
    else:
        await update.message.reply_text("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
async def text_handler(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    user = update.effective_user.username or "–∞–Ω–æ–Ω–∏–º"
    txt = update.message.text or ""

    if not await check_subscription(ctx, uid):
        btn = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚úÖ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=f"https://t.me/c/{str(TARGET_CHANNEL_ID)[4:]}")]
        ])
        return await update.message.reply_text("‚ùó –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.", reply_markup=btn)

    now = datetime.utcnow()
    if uid in last_post_time and now - last_post_time[uid] < POST_COOLDOWN:
        wait = POST_COOLDOWN - (now - last_post_time[uid])
        return await update.message.reply_text(f"‚è± –ù–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ {wait.seconds//60} –º–∏–Ω.")

    if count_symbols(txt) > 100:
        return await update.message.reply_text("‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ 100 —Å–∏–º–≤–æ–ª–æ–≤.")
    if has_forbidden(txt):
        return await update.message.reply_text("‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω–æ–µ —Å–ª–æ–≤–æ.")
    if not has_required(txt):
        return await update.message.reply_text("‚ùå –ù–µ—Ç –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ (–ø—Ä–æ–¥–∞–∂–∞ / –ø–æ–∫—É–ø–∫–∞ / –æ–±–º–µ–Ω).")

    last_post_time[uid] = now
    await update.message.reply_text("‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ.")
    await ctx.bot.send_message(
        chat_id=TARGET_CHANNEL_ID,
        text=format_announcement(txt, user),
        reply_markup=contact_button(user)
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ
async def photo_handler(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    user = update.effective_user.username or "–∞–Ω–æ–Ω–∏–º"
    cap = update.message.caption or ""
    photos = update.message.photo or []
    mid = update.message.message_id

    if not await check_subscription(ctx, uid):
        btn = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚úÖ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=f"https://t.me/c/{str(TARGET_CHANNEL_ID)[4:]}")]
        ])
        return await update.message.reply_text("‚ùó –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.", reply_markup=btn)

    if len(photos) != 1:
        return await update.message.reply_text("‚ùå –ú–æ–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é.")

    now = datetime.utcnow()
    if uid in last_post_time and now - last_post_time[uid] < POST_COOLDOWN:
        wait = POST_COOLDOWN - (now - last_post_time[uid])
        return await update.message.reply_text(f"‚è± –ù–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ {wait.seconds//60} –º–∏–Ω.")

    if count_symbols(cap) > 100:
        return await update.message.reply_text("‚ùå –ü–æ–¥–ø–∏—Å—å –ø—Ä–µ–≤—ã—à–∞–µ—Ç 100 —Å–∏–º–≤–æ–ª–æ–≤.")
    if has_forbidden(cap):
        return await update.message.reply_text("‚ùå –ó–∞–ø—Ä–µ—â—ë–Ω–Ω–æ–µ —Å–ª–æ–≤–æ –≤ –ø–æ–¥–ø–∏—Å–∏.")

    if not has_required(cap):
        pending[mid] = {"type": "photo", "fid": photos[-1].file_id, "cap": cap, "user": user, "uid": uid}
        await update.message.reply_text("üîé –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é.")
        return await ctx.bot.send_photo(
            chat_id=MODERATION_CHAT_ID,
            photo=photos[-1].file_id,
            caption=cap,
            reply_markup=moderation_buttons(mid)
        )

    last_post_time[uid] = now
    await update.message.reply_text("‚úÖ –§–æ—Ç–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ.")
    await ctx.bot.send_photo(
        chat_id=TARGET_CHANNEL_ID,
        photo=photos[-1].file_id,
        caption=build_caption(cap, user),
        reply_markup=contact_button(user)
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
async def mod_cb(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    act, sid = q.data.split("_")
    ad = pending.pop(int(sid), None)
    if not ad:
        return await q.edit_message_text("‚ùå –£–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ.")

    user = ad["user"]
    cap = ad.get("cap", "")
    uid = ad.get("uid")

    if act == "approve":
        last_post_time[uid] = datetime.utcnow()
        await ctx.bot.send_photo(
            chat_id=TARGET_CHANNEL_ID,
            photo=ad["fid"],
            caption=format_announcement(cap, user),
            reply_markup=contact_button(user)
        )
        await q.edit_message_text("‚úÖ –û–¥–æ–±—Ä–µ–Ω–æ –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ.")
    else:
        await q.edit_message_text("‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º.")
        await ctx.bot.send_message(chat_id=REJECTED_CHAT_ID, text=f"–û—Ç–∫–ª–æ–Ω–µ–Ω–æ @{user}:\n{cap}")

# –ó–∞–ø—É—Å–∫
def run_bot():
    app_bt = ApplicationBuilder().token(TOKEN).build()
    app_bt.add_handler(CommandHandler("start", start_cmd))
    app_bt.add_handler(CommandHandler("rules", rules_cmd))
    app_bt.add_handler(CommandHandler("cleartime", cleartime_cmd))
    app_bt.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_handler))
    app_bt.add_handler(MessageHandler(filters.PHOTO, photo_handler))
    app_bt.add_handler(CallbackQueryHandler(mod_cb))

    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    app_bt.run_polling()

if __name__ == "__main__":
    threading.Thread(
        target=lambda: app.run(host="0.0.0.0", port=8080),
        daemon=True
    ).start()
    run_bot()
