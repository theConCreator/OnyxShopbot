import os
import logging
import re
import html
import unicodedata
from flask import Flask
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes
from langdetect import detect

# –ó–∞–≥—Ä—É–∑–∫–∞ env-–ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
load_dotenv()

TOKEN = os.getenv("BOT_TOKEN")
MODERATION_CHAT_ID = int(os.getenv("MODERATION_CHAT_ID"))
REJECTED_CHAT_ID = int(os.getenv("REJECTED_CHAT_ID"))
TARGET_CHANNEL_ID = int(os.getenv("TARGET_CHANNEL_ID"))

# Flask —Å–µ—Ä–≤–µ—Ä –¥–ª—è Render –ø–∏–Ω–≥–∞
app = Flask(__name__)

@app.route('/')
def ping():
    return "I'm alive", 200

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –•–µ—à—Ç–µ–≥–∏
KEYWORDS = {
    "sell": ["–ø—Ä–æ–¥–∞–∂–∞", "–ø—Ä–æ–¥–∞—é", "—Å–µ–ª–ª", "sell"],
    "buy": ["–ø–æ–∫—É–ø–∫–∞", "–∫—É–ø–ª—é", "–∏—â—É", "–±–∞–π", "buy"],
    "exchange": ["–æ–±–º–µ–Ω", "–æ–±–º–µ–Ω–∏–≤–∞—é", "–º–µ–Ω—è—é", "exchange"],
    "category": [
        "–ø–æ–¥–∞—Ä–∫–∏", "nft", "—é–∑–µ—Ä", "username", "–∞–∫–∫–∞—É–Ω—Ç", "–∑–≤–µ–∑–¥—ã", "—á–∞—Ç", "–∫–∞–Ω–∞–ª",
        "–¥–æ–ª–ª–∞—Ä—ã", "—Ç–æ–Ω", "usdt", "ton", "rub", "crypto", "–∫—Ä–∏–ø—Ç–∞", "–º–æ–Ω–µ—Ç—ã"
    ]
}

BLOCKED_WORDS = ["https://", "http://", "t.me/joinchat", "–ø–µ—Ä–µ—Ö–æ–¥–∏", "–ø–æ–¥–ø–∏—Å—ã–≤–∞–π—Å—è", "—Ä–µ–∫–ª–∞–º–∞", "–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è"]

ALLOWED_CHARS = set("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ–∞–±–≤–≥–¥–µ—ë–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è"
                    "–ê–ë–í–ì–î–ï–Å–ñ–ó–ò–ô–ö–õ–ú–ù–û–ü–†–°–¢–£–§–•–¶–ß–®–©–™–´–¨–≠–Æ–Ø1234567890 $+√ó√∑/<[]>';@()¬•~„Äã¬§¬£‚Ä¢‚ô°.,!?%:#\"")

# –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
from datetime import datetime, timedelta
last_post_time = datetime.min

# === –£—Ç–∏–ª–∏—Ç—ã ===

def normalize_text(text):
    text = unicodedata.normalize('NFKD', text)
    text = ''.join(c for c in text if not unicodedata.combining(c))
    text = html.unescape(text)
    return text.lower()

def extract_hashtags(text):
    tags = set()
    lower = normalize_text(text)
    for tag, words in KEYWORDS.items():
        if any(word in lower for word in words):
            tags.add(tag)
    return tags

def has_blocked_content(text):
    lower = normalize_text(text)
    return any(bad in lower for bad in BLOCKED_WORDS)

def contains_illegal_chars(text):
    return any(c not in ALLOWED_CHARS for c in text)

def is_text_allowed(text):
    try:
        lang = detect(text)
        return lang in ["ru", "en"]
    except:
        return False

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π ===

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ ‚Äî —Ç–µ–∫—Å—Ç (–¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤) –∏ –æ–¥–Ω—É –∫–∞—Ä—Ç–∏–Ω–∫—É (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ).\n"
                                    "–û–±—ä—è–≤–ª–µ–Ω–∏—è: —Ç–æ–ª—å–∫–æ –ø–æ–∫—É–ø–∫–∞, –ø—Ä–æ–¥–∞–∂–∞ –∏–ª–∏ –æ–±–º–µ–Ω NFT –∏ —Å–æ–ø—É—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤.\n"
                                    "üö´ –†–µ–∫–ª–∞–º–∞ –∏ —Å—Å—ã–ª–∫–∏ –∑–∞–ø—Ä–µ—â–µ–Ω—ã.")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global last_post_time
    msg = update.message

    text = msg.text or ""
    photo = msg.photo[-1].file_id if msg.photo else None
    user = msg.from_user
    username = user.username or user.first_name

    normalized = normalize_text(text)
    hashtags = extract_hashtags(text)

    # –ü—Ä–æ–≤–µ—Ä–∫–∏
    reasons = []
    if len(text) > 100:
        reasons.append("üî¥ –¢–µ–∫—Å—Ç –¥–ª–∏–Ω–Ω–µ–µ 100 —Å–∏–º–≤–æ–ª–æ–≤.")
    if has_blocked_content(text):
        reasons.append("üî¥ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω–æ–µ —Å–ª–æ–≤–æ –∏–ª–∏ —Å—Å—ã–ª–∫–∞.")
    if contains_illegal_chars(text):
        reasons.append("üî¥ –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã.")
    if not is_text_allowed(text):
        reasons.append("üî¥ –†–∞–∑—Ä–µ—à—ë–Ω —Ç–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–π –∏–ª–∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫.")
    if len(hashtags) == 0:
        reasons.append("üî¥ –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ (–ø—Ä–æ–¥–∞–∂–∞, –ø–æ–∫—É–ø–∫–∞, –æ–±–º–µ–Ω –∏ —Ç.–¥.).")

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    tags_text = ' '.join(f"#{tag}" for tag in hashtags)
    final_text = f"{tags_text}\n\nüì¢ –û–±—ä—è–≤–ª–µ–Ω–∏–µ\n\n"

    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üì© –ù–∞–ø–∏—Å–∞—Ç—å –ø—Ä–æ–¥–∞–≤—Ü—É", url=f"tg://user?id={user.id}")]
    ])

    final_text += f""

    # –†–µ—à–µ–Ω–∏–µ: auto, moderate, reject
    if reasons:
        reason_text = "\n".join(reasons)
        await context.bot.send_message(chat_id=REJECTED_CHAT_ID,
                                       text=f"‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç @{username}:\n\n{text}\n\n–ü—Ä–∏—á–∏–Ω—ã:\n{reason_text}")
        await msg.reply_text("–í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –ø—Ä–æ—à–ª–æ –ø—Ä–æ–≤–µ—Ä–∫—É:\n" + reason_text)
        return

    if datetime.now() - last_post_time < timedelta(hours=1):
        # –°–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ ‚Äî –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é
        await context.bot.send_message(chat_id=MODERATION_CHAT_ID,
                                       text=f"‚ö†Ô∏è –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç @{username}:\n\n{text}")
        await msg.reply_text("–í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é.")
        return

    # –£—Å–ø–µ—à–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è
    last_post_time = datetime.now()
    final_text += f"üë§ @{username}"

    if photo:
        await context.bot.send_photo(chat_id=TARGET_CHANNEL_ID, photo=photo,
                                     caption=final_text, reply_markup=keyboard)
    else:
        await context.bot.send_message(chat_id=TARGET_CHANNEL_ID, text=final_text, reply_markup=keyboard)

    await msg.reply_text("‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ!")

# === –ó–∞–ø—É—Å–∫ ===

def main():
    application = ApplicationBuilder().token(TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT | filters.PHOTO, handle_message))

    # –ó–∞–ø—É—Å–∫ —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞
    application.run_polling()

if __name__ == "__main__":
    from threading import Thread
    Thread(target=main).start()
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))
