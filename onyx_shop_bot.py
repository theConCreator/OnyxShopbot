import os
import logging
import threading
from dotenv import load_dotenv
from flask import Flask
from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
)

# 1) –ö–æ–Ω—Ñ–∏–≥
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")

# 2) Flask –¥–ª—è –ø–∏–Ω–≥–∞
app = Flask(__name__)
@app.route("/", methods=["GET", "HEAD"])
def alive():
    return "OK", 200

# 3) –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format="%(asctime)s %(levelname)s %(name)s  %(message)s",
    level=logging.INFO,
)
logger = logging.getLogger(__name__)

# 4) –î–µ–±–∞–≥‚Äë—Ö–µ–Ω–¥–ª–µ—Ä, —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å _–≤—Å—ë_
async def debug_all(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"üîî Update: {update!r}")

# 5) –£–ø—Ä–æ—â—ë–Ω–Ω—ã–π /start
async def start_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"‚Üí /start from @{update.effective_user.username}")
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –ë–æ—Ç –∂–∏–≤ –∏ —Å–ª—É—à–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã.")

# 6) –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
def run_bot():
    application = Application.builder().token(TOKEN).build()

    # ** Debug: —Å—Ç–∞–≤–∏–º –ø–µ—Ä–≤—ã–º, —á—Ç–æ–±—ã –Ω–∞–≤–µ—Ä–Ω—è–∫–∞ –ø–æ–π–º–∞—Ç—å –≤—Å—ë **
    application.add_handler(MessageHandler(filters.ALL, debug_all), group=0)

    # –ù–∞—Å—Ç–æ—è—â–∏–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã:
    application.add_handler(CommandHandler("start", start_cmd), group=1)
    # ... —Å—é–¥–∞ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –æ—Å—Ç–∞–ª—å–Ω—ã–µ –≤–∞—à–∏ —Ö–µ–Ω–¥–ª–µ—Ä—ã ...

    logger.info("üöÄ –ó–∞–ø—É—Å–∫ Telegram polling‚Ä¶")
    application.run_polling()

# 7) –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
if __name__ == "__main__":
    # –°—Ç–∞—Ä—Ç Flask –≤ —Ñ–æ–Ω–µ
    threading.Thread(
        target=lambda: app.run(host="0.0.0.0", port=int(os.getenv("PORT", "8080"))),
        daemon=True
    ).start()

    # –°—Ç–∞—Ä—Ç –±–æ—Ç–∞ (–±–ª–æ–∫–∏—Ä—É—é—â–∏–π)
    run_bot()
