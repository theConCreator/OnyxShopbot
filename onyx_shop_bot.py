import os
import threading
from dotenv import load_dotenv
from telegram import (InlineKeyboardButton, InlineKeyboardMarkup, Update, Bot)
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
from flask import Flask
import logging

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
TARGET_CHANNEL_ID = int(os.getenv("TARGET_CHANNEL_ID"))
MODERATION_CHAT_ID = int(os.getenv("MODERATION_CHAT_ID"))
REJECTED_CHAT_ID = int(os.getenv("REJECTED_CHAT_ID"))

# Flask –¥–ª—è —Ñ–µ–π–∫–æ–≤–æ–≥–æ –ø–∏–Ω–≥–∞
app = Flask(__name__)

@app.route('/')
def index():
    return "Bot is running."

def run_flask():
    app.run(host='0.0.0.0', port=8080)

# –í–∫–ª—é—á–∞–µ–º logging –¥–ª—è –æ—à–∏–±–æ–∫
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –í–∫–ª—é—á–∞–µ–º —Ñ–µ–π–∫–æ–≤—ã–π Flask –¥–ª—è –ø–∏–Ω–≥–∞
flask_thread = threading.Thread(target=run_flask)
flask_thread.start()

# –°–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏ —Å–ª–æ–≤
ALLOWED_SPECIAL_CHARS = set("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789 .,!?:;()[]{}@#$%^&*-+=_~<>/\\\\|'\"`‚ô°‚ù§‚Ä¢‚ÇΩ¬•‚Ç¨$¬£‚ÇøüôÇüôÉüòÄüòÇüòÖüòäüòâüëçüî•üíéüöÄ‚ú®üéÅüí∞üéâüí¨")
FORBIDDEN_WORDS = ["—Ä–µ–∫–ª–∞–º–∞", "–ø–æ–¥–ø–∏—à–∏—Å—å", "–ø–æ–¥–ø–∏—Å–∫–∞", "—Ä–µ—Ñ–µ—Ä–∞–ª", "—Å—Å—ã–ª–∫–∞", "instagram", "youtube", "tiktok", "http", "www", ".com", ".ru"]

# –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
SALE_KEYWORDS = ["–ø—Ä–æ–¥–∞–∂–∞", "–ø—Ä–æ–¥–∞—é", "sell", "—Å–µ–ª–ª", "s"]
BUY_KEYWORDS = ["–∫—É–ø–ª—é", "–ø–æ–∫—É–ø–∫–∞", "buy", "b"]
TRADE_KEYWORDS = ["–æ–±–º–µ–Ω", "–º–µ–Ω—è—é", "trade", "swap"]
CATEGORY_KEYWORDS = ["nft", "—á–∞—Ç", "–∫–∞–Ω–∞–ª", "–¥–æ–ª–ª–∞—Ä—ã", "—Ç–æ–Ω", "usdt", "–∑–≤—ë–∑–¥—ã", "–≥–∏–≤", "nft –ø–æ–¥–∞—Ä–æ–∫", "–ø–æ–¥–∞—Ä–∫–∏"]

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
pending_approvals = {}

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∏
def build_caption(text: str, username: str, price: str = None):
    user_mention = f"@{username}" if username else "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∫—Ä—ã–ª –∏–º—è"
    price_line = f"\n–¶–µ–Ω–∞: {price}" if price else ""
    caption = f"""
–û–±—ä—è–≤–ª–µ–Ω–∏–µ:

{text.strip()}

{price_line}

–û–ø—É–±–ª–∏–∫–æ–≤–∞–ª(–∞): {user_mention}

–ù–∞–ø–∏—Å–∞—Ç—å –ø—Ä–æ–¥–∞–≤—Ü—É: [–ù–∞–ø–∏—Å–∞—Ç—å](https://t.me/{username})
    """
    return caption[:1024]  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ —Å–∏–º–≤–æ–ª–∞–º Telegram

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å
def is_valid_ad(text: str):
    text_lower = text.lower()
    if any(word in text_lower for word in FORBIDDEN_WORDS):
        return False
    if not any(kw in text_lower for kw in SALE_KEYWORDS + BUY_KEYWORDS + TRADE_KEYWORDS):
        return False
    return all(char in ALLOWED_SPECIAL_CHARS for char in text)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –æ –ø—Ä–æ–¥–∞–∂–µ, –ø–æ–∫—É–ø–∫–µ –∏ –æ–±–º–µ–Ω–µ –≤ @onyx_sh0p.\n"
        "–î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏—Ç–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –±–æ—Ç—É."
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    username = update.message.from_user.username or "–∞–Ω–æ–Ω–∏–º"
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω—ã, –µ—Å–ª–∏ –æ–Ω–∞ —É–∫–∞–∑–∞–Ω–∞
    price = None
    if "–¶–µ–Ω–∞:" in text:
        text, price = text.split("–¶–µ–Ω–∞:", 1)
        price = price.strip()

    if is_valid_ad(text):
        await update.message.reply_text("‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ.")
        await context.bot.send_message(
            chat_id=TARGET_CHANNEL_ID,
            text=build_caption(text, username, price),
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ù–∞–ø–∏—Å–∞—Ç—å –ø—Ä–æ–¥–∞–≤—Ü—É", url=f"https://t.me/{username}")]])
        )
    else:
        await update.message.reply_text("üîé –û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é.")
        pending_approvals[update.message.message_id] = {
            "type": "text",
            "text": text,
            "username": username,
            "price": price
        }
        await context.bot.send_message(
            chat_id=MODERATION_CHAT_ID,
            text=f"–ù–æ–≤–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é:\n{text}",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_{update.message.message_id}"),
                 InlineKeyboardButton("–û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{update.message.message_id}")]
            ])
        )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ñ–æ—Ç–æ
async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    caption = update.message.caption or ""
    file_id = update.message.photo[-1].file_id
    username = update.message.from_user.username or "–∞–Ω–æ–Ω–∏–º"
    
    # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –¥–æ–±–∞–≤–∏–º —Ü–µ–Ω—É
    price = None
    if "–¶–µ–Ω–∞:" in caption:
        caption, price = caption.split("–¶–µ–Ω–∞:", 1)
        price = price.strip()

    if is_valid_ad(caption):
        await update.message.reply_text("‚úÖ –§–æ—Ç–æ–æ–±—ä—è–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ.")
        await context.bot.send_photo(
            chat_id=TARGET_CHANNEL_ID,
            photo=file_id,
            caption=build_caption(caption, username, price),
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ù–∞–ø–∏—Å–∞—Ç—å –ø—Ä–æ–¥–∞–≤—Ü—É", url=f"https://t.me/{username}")]])
        )
    else:
        await update.message.reply_text("üîé –§–æ—Ç–æ–æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é.")
        pending_approvals[update.message.message_id] = {
            "type": "photo",
            "file_id": file_id,
            "text": caption,
            "username": username,
            "price": price
        }
        await context.bot.send_photo(
            chat_id=MODERATION_CHAT_ID,
            photo=file_id,
            caption=f"–ù–æ–≤–æ–µ —Ñ–æ—Ç–æ–æ–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é:\n{caption}",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_{update.message.message_id}"),
                 InlineKeyboardButton("–û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{update.message.message_id}")]
            ])
        )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
async def handle_moderation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    action, ad_id = query.data.split("_")
    
    ad = pending_approvals.pop(int(ad_id), None)
    if ad is None:
        await query.edit_message_text("‚ùå –û–±—ä—è–≤–ª–µ–Ω–∏–µ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ.")
        return

    if action == "approve":
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –ø–æ ID –∏ –ø—É–±–ª–∏–∫—É–µ–º
        if ad["type"] == "photo":
            await context.bot.send_photo(
                chat_id=TARGET_CHANNEL_ID,
                photo=ad["file_id"],
                caption=build_caption(ad["text"], ad["username"], ad["price"]),
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ù–∞–ø–∏—Å–∞—Ç—å –ø—Ä–æ–¥–∞–≤—Ü—É", url=f"https://t.me/{ad['username']}")]])
            )
        else:
            await context.bot.send_message(
                chat_id=TARGET_CHANNEL_ID,
                text=build_caption(ad["text"], ad["username"], ad["price"]),
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ù–∞–ø–∏—Å–∞—Ç—å –ø—Ä–æ–¥–∞–≤—Ü—É", url=f"https://t.me/{ad['username']}")]])
            )
        await query.edit_message_text("‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ–¥–æ–±—Ä–µ–Ω–æ –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ.")
    elif action == "reject":
        await query.edit_message_text("‚ùå –û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ.")
        await context.bot.send_message(REJECTED_CHAT_ID, f"–û—Ç–∫–ª–æ–Ω–µ–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ:\n{ad['text']}")

if __name__ == '__main__':
    application = ApplicationBuilder().token(TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    application.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    application.add_handler(CallbackQueryHandler(handle_moderation))

    application.run_polling()
