import os
import threading
import logging
from flask import Flask
from telegram import Update, InputFile
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters,
    ContextTypes,
)
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# Telegram –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
TOKEN = os.getenv("BOT_TOKEN")
TARGET_CHANNEL_ID = os.getenv("TARGET_CHANNEL_ID")
MODERATION_CHAT_ID = os.getenv("MODERATION_CHAT_ID")
REJECTED_CHAT_ID = os.getenv("REJECTED_CHAT_ID")

# Flask app
app = Flask(__name__)

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ó–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–ª–æ–≤–∞
FORBIDDEN_WORDS = {"–æ–±–º–∞–Ω", "–º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ", "scam"}

# ==== –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ====
def normalize_text(text: str) -> str:
    translation = str.maketrans(
        "√†√°√§√¢√ß√®√©√´√™√¨√≠√Ø√Æ√±√≤√≥√∂√¥√π√∫√º√ª",
        "aaaa√ßeeeeiiiinoooouuuu"
    )
    return text.translate(translation)

def contains_forbidden_words(text: str) -> bool:
    normalized_text = normalize_text(text.lower())
    return any(word in normalized_text for word in FORBIDDEN_WORDS)

# ==== –•—ç–Ω–¥–ª–µ—Ä—ã ====
async def start_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    menu_keyboard = [["üì¢ –†–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ"]]
    reply_markup = context.bot.keyboard_markup(keyboard=menu_keyboard, resize_keyboard=True)

    photo_path = os.path.join(os.path.dirname(__file__), "onyxshopbot.png")
    with open(photo_path, "rb") as photo:
        await update.message.reply_photo(
            photo=photo,
            caption="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Onyx Shop Bot!\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ.",
            reply_markup=reply_markup,
        )

async def text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if contains_forbidden_words(text):
        await update.message.reply_text("üö´ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ –∏ –±—ã–ª–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ.")
        return

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é
    keyboard = [
        [
            {"text": "‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", "callback_data": f"approve|{update.message.chat.id}|{update.message.message_id}"},
            {"text": "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", "callback_data": f"reject|{update.message.chat.id}|{update.message.message_id}"},
        ]
    ]
    await context.bot.send_message(
        chat_id=MODERATION_CHAT_ID,
        text=f"–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n\n{text}",
        reply_markup=context.bot.inline_keyboard_markup(keyboard)
    )

async def photo_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üñº –°–ø–∞—Å–∏–±–æ –∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ! –û–Ω–æ –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º.")

async def mod_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    data = query.data.split("|")
    action, user_id, msg_id = data[0], int(data[1]), int(data[2])

    original_msg = await context.bot.forward_message(chat_id=user_id, from_chat_id=user_id, message_id=msg_id)

    if action == "approve":
        await context.bot.send_message(chat_id=TARGET_CHANNEL_ID, text=original_msg.text)
        await query.edit_message_text("‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ–¥–æ–±—Ä–µ–Ω–æ –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ.")
    elif action == "reject":
        await context.bot.send_message(chat_id=REJECTED_CHAT_ID, text=original_msg.text)
        await query.edit_message_text("‚ùå –û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∞—Ä—Ö–∏–≤.")

# ==== Telegram bot –∑–∞–ø—É—Å–∫ ====
def run_bot():
    application = Application.builder().token(TOKEN).build()
    application.add_handler(CommandHandler("start", start_cmd))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_handler))
    application.add_handler(MessageHandler(filters.PHOTO, photo_handler))
    application.add_handler(CallbackQueryHandler(mod_cb))

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω (polling)")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

# ==== Flask –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å ====
@app.route("/", methods=["GET", "HEAD"])
def index():
    return "Onyx Bot is running!", 200

@app.before_first_request
def activate_bot():
    threading.Thread(target=run_bot, daemon=True).start()

if __name__ == "__main__":
    logger.info("–ó–∞–ø—É—Å–∫ Flask –¥–ª—è Render...")
    app.run(host="0.0.0.0", port=8080)
